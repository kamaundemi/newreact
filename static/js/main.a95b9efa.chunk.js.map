{"version":3,"sources":["components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["CardList","robots","Error","SearchBox","searchfield","searchChange","className","type","placeholder","onChange","Scroll","props","console","log","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","name","toLowerCase","includes","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"qOAyBeA,EAtBE,SAAC,GAAe,EAAbC,OAEhB,MAAM,IAAIC,MAAM,UCcLC,EAjBG,SAAC,GACnB,EADoBC,YACnB,IADgCC,EACjC,EADiCA,aAEhC,OAEC,yBAAKC,UAAW,OAChB,2BACCA,UAAU,mCACVC,KAAK,SACLC,YAAY,gBACZC,SAAUJ,MCEEK,EAXA,SAAEC,GAEhB,OADAC,QAAQC,IAAIF,GAEX,yBAAKG,MAAO,CAACC,UAAU,SAAUC,OAAQ,kBAAmBC,OAAO,UAClEN,EAAMO,WCcMC,E,YAjBd,WAAYR,GAAO,IAAD,8BAClB,4CAAMA,KACDS,MAAM,CACXC,UAAU,GAHQ,E,+EAMAC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SACP,qDAEAG,KAAKb,MAAMO,a,GAfSQ,aCsDbC,G,kBA/Cd,aAAc,IAAD,8BACZ,+CAiBDC,eAAgB,SAACC,GACf,EAAKJ,SAAS,CAACrB,YAAayB,EAAMC,OAAOC,SAjB1C,EAAKX,MAAQ,CAEZnB,OAAQ,GACRG,YAAa,IAEdQ,QAAQC,IAAI,eAPA,E,iFASO,IAAD,OAElBmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACL,EAAKX,SAAS,CAACxB,OAAOmC,S,+BASb,IAAD,EACoBZ,KAAKJ,MAA3BnB,EADE,EACFA,OAAQG,EADN,EACMA,YACTiC,EAAiBpC,EAAOqC,QAAO,SAAAC,GACnC,OAAOA,EAAMC,KAAKC,cAAcC,SAAStC,EAAYqC,kBAEvD,OAAQxC,EAAO0C,OAIf,yBAAKrC,UAAY,MAChB,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWD,aAAemB,KAAKI,iBAC/B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU3B,OAAQoC,OARlB,2C,GA9BcX,cCEZkB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTlB,MAAK,SAAAsB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBrC,QACfgC,UAAUC,cAAcO,WAK1BhD,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBgD,OAAM,SAAAvC,GACLV,QAAQU,MAAM,4CAA6CA,M,MC5DjEwC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDUlC,WACb,GAA6C,kBAAmBb,UAAW,CAGzE,GADkB,IAAIc,IAAIC,YAAwBrB,OAAOC,UAC3CqB,SAAWtB,OAAOC,SAASqB,OAIvC,OAGFtB,OAAOuB,iBAAiB,QAAQ,WAC9B,IAAMlB,EAAK,UAAMgB,YAAN,sBAEPvB,EAwCV,SAAiCO,GAE/BnB,MAAMmB,GACHlB,MAAK,SAAAC,GAGkB,MAApBA,EAASoC,SACuD,IAAhEpC,EAASqC,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CrB,UAAUC,cAAcqB,MAAMzC,MAAK,SAAAsB,GACjCA,EAAaoB,aAAa1C,MAAK,WAC7Ba,OAAOC,SAAS6B,eAKpB1B,EAAgBC,MAGnBU,OAAM,WACLjD,QAAQC,IACN,oEA5DAgE,CAAwB1B,GAGxBD,EAAgBC,OCxBxB2B,I","file":"static/js/main.a95b9efa.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  if(true){\r\n    throw new Error('Noooo');\r\n  }\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) =>\r\n{\r\n\treturn (\r\n\t\t\r\n\t\t<div className ='pa2'>\r\n\t\t<input \r\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='search robots' \r\n\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\r\n\t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = ( props) => {\r\n\tconsole.log(props);\r\n\treturn (\t\r\n\t\t<div style={{overflowY:'scroll', border: '1px solid black', height:'800px'}}>\r\n\t\t{props.children}\r\n\r\n\t\t</div>\r\n\t\t);\r\n\r\n};\r\n\r\nexport default Scroll;","import React ,{Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n\tconstructor(props){\r\n\tsuper(props);\r\n\tthis.state={\r\n\thasError: false\r\n\t}\r\n}\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({hasError: true})\r\n\t}\r\n\t\r\n\trender(){\r\n\tif(this.state.hasError){\r\n\treturn <h1>Opps Did not work....</h1>\r\n\t}\r\n\treturn this.props.children\r\n\t}\r\n}\r\nexport default ErrorBoundary;","import React, { Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\n// import {robots} from './robots';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\t// robots: robots,\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t\tconsole.log('constructor')\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\t// console.log('componentDidMount');\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=>  response.json()) \r\n\t\t.then(users =>{\r\n\t\t\tthis.setState({robots:users})});\r\n\t\t\r\n\t}\t\r\n\t\r\n\tonSearchChange =(event) => {\r\n\t\t\tthis.setState({searchfield: event.target.value})\r\n\t\t\t\r\n\t\t\t\r\n\t}\r\n\trender () {\r\n\t\tconst {robots, searchfield} =this.state;\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n\t\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t\t})\r\n\t\treturn !robots.length ?\r\n\t\t\t <h1>Loading</h1> :\r\n\t\t\r\n\t (\r\n\t\t<div className = 'tc'>\r\n\t\t\t<h1 className='f1'> RoboFriends</h1>\r\n\t\t\t<SearchBox searchChange= {this.onSearchChange}/>\r\n\t\t\t<Scroll>\r\n\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t\t</ErrorBoundary>\r\n\t\t\t</Scroll>\r\n\r\n\t\t</div>\r\n\r\n\t\t\t);\r\n\t\t\t\r\n\t}\r\n}\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n// import * as serviceWorker from './serviceWorker';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\n// import CardList from './CardList';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nregisterServiceWorker();\n"],"sourceRoot":""}